// Generated by Haxe 4.3.4
(function ($global) { "use strict";
var Rgd = function() { };
Rgd.main = function() {
	window.onload = function() {
		Rgd.elem("work").onclick = function() {
			var project = { author : Rgd.value(Rgd.elem("author")), name : Rgd.value(Rgd.elem("project")), description : Rgd.value(Rgd.elem("desc")), cost : Rgd.value(Rgd.elem("cost")), genre : Rgd.value(Rgd.elem("genre")), color : Rgd.value(Rgd.elem("color")), platforms : []};
			var platforms = window.document.getElementsByClassName("telem");
			var _g = 0;
			while(_g < platforms.length) {
				var element = platforms[_g];
				++_g;
				project.platforms.push({ platform : element.childNodes[0].textContent, link : element.childNodes[1].textContent});
			}
			Rgd.setVelue(Rgd.elem("out"),JSON.stringify(project));
			var pic = Rgd.elem("pic");
			var file = pic.files[0];
			if(file != null) {
				var r = new FileReader();
				r.readAsDataURL(file);
				r.onload = function(e) {
					var e1 = e.target.result;
					var tmp = e.target.result.indexOf(",") + 1;
					project.picture = e1.substr(tmp);
					Rgd.setVelue(Rgd.elem("out"),JSON.stringify(project));
				};
			}
		};
		return Rgd.elem("addlink").onclick = function() {
			var table = Rgd.elem("links");
			var tr = window.document.createElement("tr");
			tr.className = "telem";
			table.appendChild(tr);
			var tdName = window.document.createElement("td");
			var tdLink = window.document.createElement("td");
			var tdDel = window.document.createElement("td");
			tr.appendChild(tdName);
			tr.appendChild(tdLink);
			tr.appendChild(tdDel);
			tdName.textContent = Rgd.value(Rgd.elem("platform"));
			tdLink.textContent = Rgd.value(Rgd.elem("link"));
			var delBtn = window.document.createElement("button");
			delBtn.textContent = "удалить";
			delBtn.onclick = function() {
				return table.removeChild(tr);
			};
			return tdDel.appendChild(delBtn);
		};
	};
};
Rgd.elem = function(id) {
	return window.document.getElementById(id);
};
Rgd.value = function(element) {
	return element.value;
};
Rgd.setVelue = function(element,value) {
	element.value = value;
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
Rgd.main();
})({});
